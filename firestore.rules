rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // === HELPER FUNCTIONS ===
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // === INGREDIENTS COLLECTION (MASTER DATA) ===
    match /ingredients/{ingredientId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // === USERS COLLECTION ===
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId) && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'email', 'createdAt']));
      allow create: if request.auth != null;
      allow delete: if false;

      // Sub-collections
      match /pantry/{ingredientId} {
        allow read, write, delete: if isOwner(userId);
      }
      match /kitchen_log/{logId} {
        allow read, write: if isOwner(userId);
      }
    }

    // === RECIPES & RECIPE_CACHE COLLECTIONS ===
    match /recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
    match /recipe_cache/{hashId} {
      allow read: if isAuthenticated();
      allow write: if request.auth != null;
    }

    // === POSTS COLLECTION ===
    match /posts/{postId} {
      allow read: if isAuthenticated();

      function isValidPost() {
        let post = request.resource.data;
        return post.imageUrl is string
          && post.imageUrl.matches('https://.*')
          && post.caption is string
          && post.caption.size() <= 500
          && post.authorId is string
          && post.likes is list
          && post.likes.size() == 0
          && post.commentCount is number
          && post.commentCount == 0
          && post.bookmarkCount is number
          && post.bookmarkCount == 0
          && post.authorUsername is string
          && post.authorAvatarUrl is string;
      }
      
      allow create: if isAuthenticated()
        && isValidPost()
        && request.resource.data.authorId == request.auth.uid;
        
      function isIncrementing(fieldName) {
        // Hàm get() an toàn, trả về 0 nếu trường chưa tồn tại trên document cũ.
        return request.resource.data[fieldName] == resource.data.get(fieldName, 0) + 1;
      }

      function isDecrementing(fieldName) {
        // Chỉ cho phép giảm khi trường đã tồn tại và lớn hơn 0.
        return resource.data[fieldName] > 0 && request.resource.data[fieldName] == resource.data[fieldName] - 1;
      }

      allow update: if isAuthenticated() && (
        // Cho phép chỉ cập nhật 'likes'
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
        
        // Cho phép chỉ cập nhật 'commentCount' và phải là tăng/giảm 1
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']) && (isIncrementing('commentCount') || isDecrementing('commentCount'))) ||
        
        // Cho phép chỉ cập nhật 'bookmarkCount' và phải là tăng/giảm 1
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['bookmarkCount']) && (isIncrementing('bookmarkCount') || isDecrementing('bookmarkCount')))
      );

      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;

      // --- COMMENTS SUB-COLLECTION ---
      match /comments/{commentId} {
        function isCommentOwner() {
          return request.auth.uid == resource.data.authorId;
        }
        function isValidComment() {
          let comment = request.resource.data;
          return comment.content is string
              && comment.content.size() > 0
              && comment.content.size() <= 1000
              && comment.authorId == request.auth.uid;
        }

        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isValidComment();
        allow update: if isAuthenticated() && isCommentOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content']);
        allow delete: if isAuthenticated() && isCommentOwner();
      }
    }

    // === DEFAULT RULE ===
    match /{document=**} {
      allow read, write: if false;
    }
  }
}