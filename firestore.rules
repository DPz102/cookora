rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // === HELPER FUNCTIONS ===
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // === INGREDIENTS COLLECTION (MASTER DATA) ===
    // SỬA LỖI: Thêm luật này vào
    match /ingredients/{ingredientId} {
      // Cho phép bất kỳ ai đã đăng nhập đều có quyền đọc master data
      allow read: if isAuthenticated();
      // Chặn mọi hành vi ghi/sửa/xóa từ client để bảo vệ dữ liệu gốc
      allow write: if false;
    }

    // === USERS COLLECTION ===
    match /users/{userId} {
      allow read: if isAuthenticated();
      // GÓP Ý: Nên thắt chặt hơn một chút. Chỉ chủ sở hữu mới được sửa username/photoURL
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'photoURL']);
      allow create: if request.auth != null; // Rule này thường được xử lý bởi Cloud Function
      allow delete: if false;

      // Pantry sub-collection
      match /pantry/{ingredientId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      // Kitchen log sub-collection
      match /kitchen_log/{logId} {
        allow read, write: if isOwner(userId);
      }
    }

    // === RECIPES COLLECTION ===
    match /recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow create: if request.auth != null; // Dành cho Cloud Function
      allow update, delete: if false;
    }

    // === RECIPE_CACHE COLLECTION ===
    match /recipe_cache/{hashId} {
      allow read: if isAuthenticated();
      allow write: if request.auth != null; // Dành cho Cloud Function
    }

    // === POSTS COLLECTION ===
    match /posts/{postId} {
      allow read: if isAuthenticated();
      
      function isValidPost() {
        let post = request.resource.data;
        return post.imageUrl is string
          && post.imageUrl.matches('https://.*')
          && post.caption is string
          && post.caption.size() <= 500
          && post.authorId is string
          && post.likes is list;
      }
      
      allow create: if isAuthenticated()
        && isValidPost()
        && request.resource.data.authorId == request.auth.uid;
      
      allow update: if isAuthenticated()
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']);
      
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    // === DEFAULT RULE ===
    // QUAN TRỌNG: Luật này đảm bảo mọi collection không được định nghĩa ở trên
    // sẽ bị chặn hoàn toàn.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}